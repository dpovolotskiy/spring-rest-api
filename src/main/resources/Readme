1. CalculatingController - Контроллер для арифметических операций над двумя целыми числами
    Пример запроса:
        Тип запроса: POST
        URL: http://localhost:8888/multiply
        Тело запроса в формате JSON
        {
          "a" : 20,
          "b" : 10
        }
        Результат запрос: 200

    Сами арифметические операции выполянются В сервисном классе CalculatingService выполянются
    Данный класс помечен аннтоацией @Service для того, чтобы во время старта конткекста Spring'а данный класс попал в его
    контейнер. В контроллере объявляется переменная CalculatingService и помечается аннтоацией @Autowired. Таким образом
    контейнер Spring проинициализирует данную переменную бином из своего контейнера
 2. FormatterController  - Контроллер в котором текст отправленного сообщения становится целиком в верхнем/нижнем регистре
    Пример:
    Тип запроса: POST
    URL: http://localhost:8888/format
    Тело запроса в формате: Form URL Encoded, где name - message, а value - This is sample
    В контроллере используется эперемнная StringFormatter (это интрефейс, у него 2 реализации, LowerCaseFormatter и UpperCaseFormatter)
    Оба помечены аннтоцией @Service. Переменная StringFormatter помечена аннотацией @Autowired, то есть это переменную должен
    проинициализировать Spring. Но у нас есть две реализации интерфейса StringFormatter, чтобы Spring понял какую из реализией
    мы предпочитаем, нужную реализацию помечают аннтоаицей @Primary. Это не единственный способ, так же есть возможность использовать
    аннтоцию @Qualifier, но уже над самой переменной которую хотим проинициалзировать, а в качестве параметра передать в аннтоацию имя
    нужной реализации ( сейчас эта аннотация закоментирована, для ее использования раскоментируйте ее и закоментируйте  @Primary)
    Так же попробуйте запустить приложение с обеими аннтоциями, но так, чтобы к примеру @Primary был над UpperCaseFormatter,
    а @Qualifier указывал, что требуется UpperCaseFormatter, т.е. @Qualifier(value = "lowerCaseFormatter")
